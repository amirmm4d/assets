مفاهیم مهمی که داخل این مقاله در مورد انها تحقیق کردیم عبارت اند از: 

1- php-fpm 
2- مفاهیم کلی
3- fastCGI 
4- worker 
5- بهینه سازی کانفیگ

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
php-fpm:

وقتی که یک درخواست HTTP به سرور می‌رسد و اسکریپت PHP درخواست را پردازش می‌کند، PHP-FPM برای اجرای اسکریپت، یک فرآیند FastCGI را شروع می‌کند. این فرآیند FastCGI یک محیط جداگانه برای اجرای اسکریپت PHP ایجاد می‌کند و اطلاعات مربوط به درخواست HTTP را به اسکریپت ارسال می‌کند. این فرآیند‌های FastCGI به عنوان کارگران (workers) شناخته می‌شوند.
با استفاده از PHP-FPM و FastCGI، عملکرد وب سرور در پردازش اسکریپت‌های PHP بهبود می‌یابد و می‌تواند با تعداد بیشتری درخواست همزمان مقابله کند، همچنین امنیت و ایزولاسیون بیشتری را فراهم می‌کند.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
مفاهیم کلی :

برای دسترسی به فایل کانفیگ (worker) در سیستم عامل های مختلف میتوانید از مسیر استفاده کنید.
#نکته :
مسیر فایل کانفیگ ممکن است نسبت به نصب و کانفیگ شما متفاوت باشد

1. Debian/Ubuntu:
```/etc/php/{version}/fpm/pool.d/www.conf`

2. CentOS/RHEL/Fedora:
```/etc/php-fpm.d/www.conf`

3. Arch Linux:
```/etc/php/php-fpm.d/www.conf`

4. openSUSE:
```/etc/php-fpm.d/www.conf`

5. Gentoo:
```/etc/php/fpm.d/www.conf`

6. Docker:
```/usr/local/etc/php-fpm.d/www.conf
```/usr/local/etc/php-fpm/www.conf
```/etc/php-fpm.d/www.conf
```/var/www/www.conf

7. Windows:
```C:\php\php-fpm.d\www.conf

**********************************************

داخل فایل کانفیگ (worker) شما با تنظیمات زیادی و البته توضیاحت زیاد تری رو به رو میشوید.
در مرحله اول شما خیلی زیاد با کلیدواژه زیر مواجع میشوید 
PM => process manager
PM در PHP-FPM مسئول مدیریت و کنترل فرآیندهای PHP-FPM است که در حال اجرا هستند.

php-fpm از چندین pm مختلف استفاده میکند که نسبت به کارایی شما مشخص میشوند و کانفیگ خاص خود را دارند.
سه نوع مهم pm:

1. Static PM (pm = static): در این حالت، تعداد ثابتی از فرآیندها (workers) PHP-FPM تعریف می‌شود که همیشه برای پاسخگویی به درخواست‌ها آماده‌اند. تعداد فرآیندها ثابت است و با توجه به بار سرور، فرآینده‌های اضافی ایجاد نمی‌شوند.

2. Dynamic PM (pm = dynamic): در این حالت، تعداد فرآیندها (workers) PHP-FPM بر اساس بار سرور و تنظیمات مشخصی تنظیم می‌شود. با توجه به تنظیمات مشخص شده، فرآینده‌های اضافی می‌توانند ایجاد و حذف شوند تا برای پاسخگویی به بار متغیری که بر سرور وارد می‌شود، مناسب باشند.

3. OnDemand PM (pm = ondemand): در این حالت، فرآیندها (workers) PHP-FPM فقط در صورتی که درخواستی وجود داشته باشد و لازم باشد، ایجاد می‌شوند. پس از اتمام پردازش درخواست‌ها، فرآینده‌ها تا زمانی که درخواست جدیدی دریافت نکنند در حالت خواب قرار می‌گیرند و منابع سیستم را آزاد می‌کنند.

**********************************************

قبل از رسیدن به الگوریتم بهینه سازی شما نیاز دارید بدانید هر worker چقدر از رم را استفاده میکند که با توجه به این عدد که با استفاده از 
دو روش زیر به دست می اورید میتوانید داخل الگوریتم که کمی جلو تر میخوانید استفاده میکنید.

دستورات bash:

$ ps -ylC php-fpm --sort:rss

# با استفاده از این دستور تمامی worker های php-fpm لیست میشوند که میتوانید انها را انلالیز و میزان رم استفاده شده را بررسی کنید


$ ps --no-headers -o "rss,cmd" -C php-fpm | awk '{ sum+=$1 } END { printf ("%d%s\n", sum/NR/1024,"Mb") }'

# با استفاده از این دستور شما تنها خروجیی که به دست می اورید میانگین رم استفاده شده توسط worker های php-fpm است 
# این دستور دو حالت مختلف دارد که حالت دوم باید ورژن php را در دستور اعمال کنید

$ ps --no-headers -o "rss,cmd" -C php-fpm7.3 | awk '{ sum+=$1 } END { printf ("%d%s\n", sum/NR/1024,"Mb") }'


# در این نقطه از مقاله نحوه بهینه سازی و الگوریتم بهینه سازی در تمامی کانفیگ های مختلف سیستم رو با توجه به (pm = dynamic) توضیح میدم

الگوریتم:

pm                            dynamic
pm.max_childern               (total RAM - (DB ,etc, other services) / worker process size{php-fpm:rss}) - 10%
pm.start_servers              (total cpu cores - (DB ,etc, other services) * 4) - 10%
pm.min_spare_servers          (total cpu cores - (DB ,etc, other services) * 2) - 10%
pm.max_spare_servers          (total cpu cores - (DB ,etc, other services) * 4) - 10%

#نکته :
10% کسری اخر به خاطر این است که اگر سرور شلوغ شد کل منابع درگیر نشود که بتوانیم به سرور متصل شویم

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fastCGI: 

PHP-FPM در واقع وظیفه مدیریت و کنترل پردازش‌های FastCGI را بر عهده دارد. FastCGI یک پروتکل است که برای اجرای اسکریپت‌های پویا در وب سرورها استفاده می‌شود. این پروتکل مبتنی بر معماری متعامد است که به وب سرور اجازه می‌دهد اسکریپت‌های PHP را به صورت مجزا و خارج از فرآیند اصلی وب سرور اجرا کند.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
worker: 

تعداد کارگران (workers) PHP-FPM قابل پیکربندی است و توسط مدیر سیستم تنظیم می‌شود. هر کارگر می‌تواند یک فرآیند FastCGI را اجرا کرده و درخواست‌های PHP را پردازش کند. این روش به سرعت اجرا، مقیاس‌پذیری و بهره‌وری بالا در پردازش درخواست‌ها کمک می‌کند.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
بهینه سازی کانفیگ :

